.TH "<stdlib.h>: General utilities" 3 "6 Nov 2008" "Version 1.6.4" "avr-libc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
<stdlib.h>: General utilities \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBdiv_t\fP"
.br
.ti -1c
.RI "struct \fBldiv_t\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBRAND_MAX\fP   0x7FFF"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int(* \fB__compar_fn_t\fP )(const void *, const void *)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBabort\fP (void) __ATTR_NORETURN__"
.br
.ti -1c
.RI "int \fBabs\fP (int __i)"
.br
.ti -1c
.RI "long \fBlabs\fP (long __i)"
.br
.ti -1c
.RI "void * \fBbsearch\fP (const void *__key, const void *__base, size_t __nmemb, size_t __size, int(*__compar)(const void *, const void *))"
.br
.ti -1c
.RI "\fBdiv_t\fP \fBdiv\fP (int __num, int __denom) __asm__('__divmodhi4')"
.br
.ti -1c
.RI "\fBldiv_t\fP \fBldiv\fP (long __num, long __denom) __asm__('__divmodsi4')"
.br
.ti -1c
.RI "void \fBqsort\fP (void *__base, size_t __nmemb, size_t __size, \fB__compar_fn_t\fP __compar)"
.br
.ti -1c
.RI "long \fBstrtol\fP (const char *__nptr, char **__endptr, int __base)"
.br
.ti -1c
.RI "unsigned long \fBstrtoul\fP (const char *__nptr, char **__endptr, int __base)"
.br
.ti -1c
.RI "long \fBatol\fP (const char *__s) __ATTR_PURE__"
.br
.ti -1c
.RI "int \fBatoi\fP (const char *__s) __ATTR_PURE__"
.br
.ti -1c
.RI "void \fBexit\fP (int __status) __ATTR_NORETURN__"
.br
.ti -1c
.RI "void * \fBmalloc\fP (size_t __size) __ATTR_MALLOC__"
.br
.ti -1c
.RI "void \fBfree\fP (void *__ptr)"
.br
.ti -1c
.RI "void * \fBcalloc\fP (size_t __nele, size_t __size) __ATTR_MALLOC__"
.br
.ti -1c
.RI "void * \fBrealloc\fP (void *__ptr, size_t __size) __ATTR_MALLOC__"
.br
.ti -1c
.RI "double \fBstrtod\fP (const char *__nptr, char **__endptr)"
.br
.ti -1c
.RI "double \fBatof\fP (const char *__nptr)"
.br
.ti -1c
.RI "int \fBrand\fP (void)"
.br
.ti -1c
.RI "void \fBsrand\fP (unsigned int __seed)"
.br
.ti -1c
.RI "int \fBrand_r\fP (unsigned long *__ctx)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "size_t \fB__malloc_margin\fP"
.br
.ti -1c
.RI "char * \fB__malloc_heap_start\fP"
.br
.ti -1c
.RI "char * \fB__malloc_heap_end\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.PP
.nf
 #include <stdlib.h> 
.fi
.PP
.PP
This file declares some basic C macros and functions as defined by the ISO standard, plus some AVR-specific extensions. 
.SH "Define Documentation"
.PP 
.SS "#define DTOSTR_ALWAYS_SIGN   0x01"
.PP
Bit value that can be passed in \fCflags\fP to \fBdtostre()\fP. 
.SS "#define DTOSTR_PLUS_SIGN   0x02"
.PP
Bit value that can be passed in \fCflags\fP to \fBdtostre()\fP. 
.SS "#define DTOSTR_UPPERCASE   0x04"
.PP
Bit value that can be passed in \fCflags\fP to \fBdtostre()\fP. 
.SS "#define RAND_MAX   0x7FFF"
.PP
Highest number that can be generated by \fBrand()\fP. 
.SS "#define RANDOM_MAX   0x7FFFFFFF"
.PP
Highest number that can be generated by \fBrandom()\fP. 
.SH "Typedef Documentation"
.PP 
.SS "typedef int(* \fB__compar_fn_t\fP)(const void *, const void *)"
.PP
Comparision function type for \fBqsort()\fP, just for convenience. 
.SH "Function Documentation"
.PP 
.SS "void abort (void)"
.PP
The \fBabort()\fP function causes abnormal program termination to occur. This realization disables interrupts and jumps to _exit() function with argument equal to 1. In the limited AVR environment, execution is effectively halted by entering an infinite loop. 
.SS "int abs (int __i)"
.PP
The \fBabs()\fP function computes the absolute value of the integer \fCi\fP. 
.PP
\fBNote:\fP
.RS 4
The \fBabs()\fP and \fBlabs()\fP functions are builtins of gcc. 
.RE
.PP

.SS "double atof (const char * nptr)"
.PP
The \fBatof()\fP function converts the initial portion of the string pointed to by \fInptr\fP to double representation.
.PP
It is equivalent to calling 
.PP
.nf
 strtod(nptr, (char **)0); 

.fi
.PP
 
.SS "int atoi (const char * s)"
.PP
Convert a string to an integer. 
.PP
The \fBatoi()\fP function converts the initial portion of the string pointed to by \fCs\fP to integer representation. In contrast to
.PP
.PP
.nf
 (int)strtol(s, (char **)NULL, 10); 
.fi
.PP
.PP
this function does not detect overflow (\fCerrno\fP is not changed and the result value is not predictable), uses smaller memory (flash and stack) and works more quickly. 
.SS "long atol (const char * s)"
.PP
Convert a string to a long integer. 
.PP
The \fBatol()\fP function converts the initial portion of the string pointed to by \fCs\fP to long integer representation. In contrast to
.PP
.PP
.nf
 strtol(s, (char **)NULL, 10); 
.fi
.PP
.PP
this function does not detect overflow (\fCerrno\fP is not changed and the result value is not predictable), uses smaller memory (flash and stack) and works more quickly. 
.SS "void* bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, int(*)(const void *, const void *) __compar)"
.PP
The \fBbsearch()\fP function searches an array of \fCnmemb\fP objects, the initial member of which is pointed to by \fCbase\fP, for a member that matches the object pointed to by \fCkey\fP. The size of each member of the array is specified by \fCsize\fP.
.PP
The contents of the array should be in ascending sorted order according to the comparison function referenced by \fCcompar\fP. The \fCcompar\fP routine is expected to have two arguments which point to the key object and to an array member, in that order, and should return an integer less than, equal to, or greater than zero if the key object is found, respectively, to be less than, to match, or be greater than the array member.
.PP
The \fBbsearch()\fP function returns a pointer to a matching member of the array, or a null pointer if no match is found. If two members compare as equal, which member is matched is unspecified. 
.SS "void* calloc (size_t __nele, size_t __size)"
.PP
Allocate \fCnele\fP elements of \fCsize\fP each. Identical to calling \fC\fBmalloc()\fP\fP using \fCnele * size\fP as argument, except the allocated memory will be cleared to zero. 
.SS "\fBdiv_t\fP div (int __num, int __denom)"
.PP
The \fBdiv()\fP function computes the value \fCnum/denom\fP and returns the quotient and remainder in a structure named \fC\fBdiv_t\fP\fP that contains two int members named \fCquot\fP and \fCrem\fP. 
.SS "char* dtostre (double __val, char * __s, unsigned char __prec, unsigned char __flags)"
.PP
The \fBdtostre()\fP function converts the double value passed in \fCval\fP into an ASCII representation that will be stored under \fCs\fP. The caller is responsible for providing sufficient storage in \fCs\fP.
.PP
Conversion is done in the format \fC'[-]d.dddeÂ±dd'\fP where there is one digit before the decimal-point character and the number of digits after it is equal to the precision \fCprec\fP; if the precision is zero, no decimal-point character appears. If \fCflags\fP has the DTOSTRE_UPPERCASE bit set, the letter \fC'E'\fP (rather than \fC'e'\fP ) will be used to introduce the exponent. The exponent always contains two digits; if the value is zero, the exponent is \fC'00'\fP.
.PP
If \fCflags\fP has the DTOSTRE_ALWAYS_SIGN bit set, a space character will be placed into the leading position for positive numbers.
.PP
If \fCflags\fP has the DTOSTRE_PLUS_SIGN bit set, a plus sign will be used instead of a space character in this case.
.PP
The \fBdtostre()\fP function returns the pointer to the converted string \fCs\fP. 
.SS "char* dtostrf (double __val, signed char __width, unsigned char __prec, char * __s)"
.PP
The \fBdtostrf()\fP function converts the double value passed in \fCval\fP into an ASCII representationthat will be stored under \fCs\fP. The caller is responsible for providing sufficient storage in \fCs\fP.
.PP
Conversion is done in the format \fC'[-]d.ddd'\fP. The minimum field width of the output string (including the \fC'\fP.' and the possible sign for negative values) is given in \fCwidth\fP, and \fCprec\fP determines the number of digits after the decimal sign. \fCwidth\fP is signed value, negative for left adjustment.
.PP
The \fBdtostrf()\fP function returns the pointer to the converted string \fCs\fP. 
.SS "void exit (int __status)"
.PP
The \fBexit()\fP function terminates the application. Since there is no environment to return to, \fCstatus\fP is ignored, and code execution will eventually reach an infinite loop, thereby effectively halting all code processing. Before entering the infinite loop, interrupts are globally disabled.
.PP
In a C++ context, global destructors will be called before halting execution. 
.SS "void free (void * __ptr)"
.PP
The \fBfree()\fP function causes the allocated memory referenced by \fCptr\fP to be made available for future allocations. If \fCptr\fP is NULL, no action occurs. 
.SS "char* itoa (int __val, char * __s, int __radix)"
.PP
Convert an integer to a string. 
.PP
The function \fBitoa()\fP converts the integer value from \fCval\fP into an ASCII representation that will be stored under \fCs\fP. The caller is responsible for providing sufficient storage in \fCs\fP.
.PP
\fBNote:\fP
.RS 4
The minimal size of the buffer \fCs\fP depends on the choice of radix. For example, if the radix is 2 (binary), you need to supply a buffer with a minimal length of 8 * sizeof (int) + 1 characters, i.e. one character for each bit plus one for the string terminator. Using a larger radix will require a smaller minimal buffer size.
.RE
.PP
\fBWarning:\fP
.RS 4
If the buffer is too small, you risk a buffer overflow.
.RE
.PP
Conversion is done using the \fCradix\fP as base, which may be a number between 2 (binary conversion) and up to 36. If \fCradix\fP is greater than 10, the next digit after \fC'9'\fP will be the letter \fC'a'\fP.
.PP
If radix is 10 and val is negative, a minus sign will be prepended.
.PP
The \fBitoa()\fP function returns the pointer passed as \fCs\fP. 
.SS "long labs (long __i)"
.PP
The \fBlabs()\fP function computes the absolute value of the long integer \fCi\fP. 
.PP
\fBNote:\fP
.RS 4
The \fBabs()\fP and \fBlabs()\fP functions are builtins of gcc. 
.RE
.PP

.SS "\fBldiv_t\fP ldiv (long __num, long __denom)"
.PP
The \fBldiv()\fP function computes the value \fCnum/denom\fP and returns the quotient and remainder in a structure named \fC\fBldiv_t\fP\fP that contains two long integer members named \fCquot\fP and \fCrem\fP. 
.SS "char* ltoa (long int __val, char * __s, int __radix)"
.PP
Convert a long integer to a string. 
.PP
The function \fBltoa()\fP converts the long integer value from \fCval\fP into an ASCII representation that will be stored under \fCs\fP. The caller is responsible for providing sufficient storage in \fCs\fP.
.PP
\fBNote:\fP
.RS 4
The minimal size of the buffer \fCs\fP depends on the choice of radix. For example, if the radix is 2 (binary), you need to supply a buffer with a minimal length of 8 * sizeof (long int) + 1 characters, i.e. one character for each bit plus one for the string terminator. Using a larger radix will require a smaller minimal buffer size.
.RE
.PP
\fBWarning:\fP
.RS 4
If the buffer is too small, you risk a buffer overflow.
.RE
.PP
Conversion is done using the \fCradix\fP as base, which may be a number between 2 (binary conversion) and up to 36. If \fCradix\fP is greater than 10, the next digit after \fC'9'\fP will be the letter \fC'a'\fP.
.PP
If radix is 10 and val is negative, a minus sign will be prepended.
.PP
The \fBltoa()\fP function returns the pointer passed as \fCs\fP. 
.SS "void* malloc (size_t __size)"
.PP
The \fBmalloc()\fP function allocates \fCsize\fP bytes of memory. If \fBmalloc()\fP fails, a NULL pointer is returned.
.PP
Note that \fBmalloc()\fP does \fInot\fP initialize the returned memory to zero bytes.
.PP
See the chapter about \fBmalloc() usage\fP for implementation details. 
.SS "void qsort (void * __base, size_t __nmemb, size_t __size, \fB__compar_fn_t\fP __compar)"
.PP
The \fBqsort()\fP function is a modified partition-exchange sort, or quicksort.
.PP
The \fBqsort()\fP function sorts an array of \fCnmemb\fP objects, the initial member of which is pointed to by \fCbase\fP. The size of each object is specified by \fCsize\fP. The contents of the array base are sorted in ascending order according to a comparison function pointed to by \fCcompar\fP, which requires two arguments pointing to the objects being compared.
.PP
The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. 
.SS "int rand (void)"
.PP
The \fBrand()\fP function computes a sequence of pseudo-random integers in the range of 0 to \fCRAND_MAX\fP (as defined by the header file <\fBstdlib.h\fP>).
.PP
The \fBsrand()\fP function sets its argument \fCseed\fP as the seed for a new sequence of pseudo-random numbers to be returned by \fBrand()\fP. These sequences are repeatable by calling \fBsrand()\fP with the same seed value.
.PP
If no seed value is provided, the functions are automatically seeded with a value of 1.
.PP
In compliance with the C standard, these functions operate on \fCint\fP arguments. Since the underlying algorithm already uses 32-bit calculations, this causes a loss of precision. See \fC\fBrandom()\fP\fP for an alternate set of functions that retains full 32-bit precision. 
.SS "int rand_r (unsigned long * __ctx)"
.PP
Variant of \fBrand()\fP that stores the context in the user-supplied variable located at \fCctx\fP instead of a static library variable so the function becomes re-entrant. 
.SS "long random (void)"
.PP
The \fBrandom()\fP function computes a sequence of pseudo-random integers in the range of 0 to \fCRANDOM_MAX\fP (as defined by the header file <\fBstdlib.h\fP>).
.PP
The \fBsrandom()\fP function sets its argument \fCseed\fP as the seed for a new sequence of pseudo-random numbers to be returned by \fBrand()\fP. These sequences are repeatable by calling \fBsrandom()\fP with the same seed value.
.PP
If no seed value is provided, the functions are automatically seeded with a value of 1. 
.SS "long random_r (unsigned long * __ctx)"
.PP
Variant of \fBrandom()\fP that stores the context in the user-supplied variable located at \fCctx\fP instead of a static library variable so the function becomes re-entrant. 
.SS "void* realloc (void * __ptr, size_t __size)"
.PP
The \fBrealloc()\fP function tries to change the size of the region allocated at \fCptr\fP to the new \fCsize\fP value. It returns a pointer to the new region. The returned pointer might be the same as the old pointer, or a pointer to a completely different region.
.PP
The contents of the returned region up to either the old or the new size value (whatever is less) will be identical to the contents of the old region, even in case a new region had to be allocated.
.PP
It is acceptable to pass \fCptr\fP as NULL, in which case \fBrealloc()\fP will behave identical to \fBmalloc()\fP.
.PP
If the new memory cannot be allocated, \fBrealloc()\fP returns NULL, and the region at \fCptr\fP will not be changed. 
.SS "void srand (unsigned int __seed)"
.PP
Pseudo-random number generator seeding; see \fBrand()\fP. 
.SS "void srandom (unsigned long __seed)"
.PP
Pseudo-random number generator seeding; see \fBrandom()\fP. 
.SS "double strtod (const char * nptr, char ** endptr)"
.PP
The \fBstrtod()\fP function converts the initial portion of the string pointed to by \fInptr\fP to double representation.
.PP
The expected form of the string is an optional plus ( \fC'+'\fP ) or minus sign ( \fC'-'\fP ) followed by a sequence of digits optionally containing a decimal-point character, optionally followed by an exponent. An exponent consists of an \fC'E'\fP or \fC'e'\fP, followed by an optional plus or minus sign, followed by a sequence of digits.
.PP
Leading white-space characters in the string are skipped.
.PP
The \fBstrtod()\fP function returns the converted value, if any.
.PP
If \fIendptr\fP is not \fCNULL\fP, a pointer to the character after the last character used in the conversion is stored in the location referenced by \fIendptr\fP.
.PP
If no conversion is performed, zero is returned and the value of \fInptr\fP is stored in the location referenced by \fIendptr\fP.
.PP
If the correct value would cause overflow, plus or minus \fCINFINITY\fP is returned (according to the sign of the value), and \fCERANGE\fP is stored in \fCerrno\fP. If the correct value would cause underflow, zero is returned and \fCERANGE\fP is stored in \fCerrno\fP. 
.SS "long strtol (const char * __nptr, char ** __endptr, int __base)"
.PP
The \fBstrtol()\fP function converts the string in \fCnptr\fP to a long value. The conversion is done according to the given base, which must be between 2 and 36 inclusive, or be the special value 0.
.PP
The string may begin with an arbitrary amount of white space (as determined by \fBisspace()\fP) followed by a single optional \fC'+'\fP or \fC'-'\fP sign. If \fCbase\fP is zero or 16, the string may then include a \fC'0x'\fP prefix, and the number will be read in base 16; otherwise, a zero base is taken as 10 (decimal) unless the next character is \fC'0'\fP, in which case it is taken as 8 (octal).
.PP
The remainder of the string is converted to a long value in the obvious manner, stopping at the first character which is not a valid digit in the given base. (In bases above 10, the letter \fC'A'\fP in either upper or lower case represents 10, \fC'B'\fP represents 11, and so forth, with \fC'Z'\fP representing 35.)
.PP
If \fCendptr\fP is not NULL, \fBstrtol()\fP stores the address of the first invalid character in \fC*endptr\fP. If there were no digits at all, however, \fBstrtol()\fP stores the original value of \fCnptr\fP in \fCendptr\fP. (Thus, if \fC*nptr\fP is not \fC'\\0'\fP but \fC**endptr\fP is \fC'\\0'\fP on return, the entire string was valid.)
.PP
The \fBstrtol()\fP function returns the result of the conversion, unless the value would underflow or overflow. If no conversion could be performed, 0 is returned. If an overflow or underflow occurs, \fCerrno\fP is set to \fBERANGE\fP and the function return value is clamped to \fCLONG_MIN\fP or \fCLONG_MAX\fP, respectively. 
.SS "unsigned long strtoul (const char * __nptr, char ** __endptr, int __base)"
.PP
The \fBstrtoul()\fP function converts the string in \fCnptr\fP to an unsigned long value. The conversion is done according to the given base, which must be between 2 and 36 inclusive, or be the special value 0.
.PP
The string may begin with an arbitrary amount of white space (as determined by \fBisspace()\fP) followed by a single optional \fC'+'\fP or \fC'-'\fP sign. If \fCbase\fP is zero or 16, the string may then include a \fC'0x'\fP prefix, and the number will be read in base 16; otherwise, a zero base is taken as 10 (decimal) unless the next character is \fC'0'\fP, in which case it is taken as 8 (octal).
.PP
The remainder of the string is converted to an unsigned long value in the obvious manner, stopping at the first character which is not a valid digit in the given base. (In bases above 10, the letter \fC'A'\fP in either upper or lower case represents 10, \fC'B'\fP represents 11, and so forth, with \fC'Z'\fP representing 35.)
.PP
If \fCendptr\fP is not NULL, \fBstrtoul()\fP stores the address of the first invalid character in \fC*endptr\fP. If there were no digits at all, however, \fBstrtoul()\fP stores the original value of \fCnptr\fP in \fCendptr\fP. (Thus, if \fC*nptr\fP is not \fC'\\0'\fP but \fC**endptr\fP is \fC'\\0'\fP on return, the entire string was valid.)
.PP
The \fBstrtoul()\fP function return either the result of the conversion or, if there was a leading minus sign, the negation of the result of the conversion, unless the original (non-negated) value would overflow; in the latter case, \fBstrtoul()\fP returns ULONG_MAX, and \fCerrno\fP is set to \fBERANGE\fP. If no conversion could be performed, 0 is returned. 
.SS "char* ultoa (unsigned long int __val, char * __s, int __radix)"
.PP
Convert an unsigned long integer to a string. 
.PP
The function \fBultoa()\fP converts the unsigned long integer value from \fCval\fP into an ASCII representation that will be stored under \fCs\fP. The caller is responsible for providing sufficient storage in \fCs\fP.
.PP
\fBNote:\fP
.RS 4
The minimal size of the buffer \fCs\fP depends on the choice of radix. For example, if the radix is 2 (binary), you need to supply a buffer with a minimal length of 8 * sizeof (unsigned long int) + 1 characters, i.e. one character for each bit plus one for the string terminator. Using a larger radix will require a smaller minimal buffer size.
.RE
.PP
\fBWarning:\fP
.RS 4
If the buffer is too small, you risk a buffer overflow.
.RE
.PP
Conversion is done using the \fCradix\fP as base, which may be a number between 2 (binary conversion) and up to 36. If \fCradix\fP is greater than 10, the next digit after \fC'9'\fP will be the letter \fC'a'\fP.
.PP
The \fBultoa()\fP function returns the pointer passed as \fCs\fP. 
.SS "char* utoa (unsigned int __val, char * __s, int __radix)"
.PP
Convert an unsigned integer to a string. 
.PP
The function \fButoa()\fP converts the unsigned integer value from \fCval\fP into an ASCII representation that will be stored under \fCs\fP. The caller is responsible for providing sufficient storage in \fCs\fP.
.PP
\fBNote:\fP
.RS 4
The minimal size of the buffer \fCs\fP depends on the choice of radix. For example, if the radix is 2 (binary), you need to supply a buffer with a minimal length of 8 * sizeof (unsigned int) + 1 characters, i.e. one character for each bit plus one for the string terminator. Using a larger radix will require a smaller minimal buffer size.
.RE
.PP
\fBWarning:\fP
.RS 4
If the buffer is too small, you risk a buffer overflow.
.RE
.PP
Conversion is done using the \fCradix\fP as base, which may be a number between 2 (binary conversion) and up to 36. If \fCradix\fP is greater than 10, the next digit after \fC'9'\fP will be the letter \fC'a'\fP.
.PP
The \fButoa()\fP function returns the pointer passed as \fCs\fP. 
.SH "Variable Documentation"
.PP 
.SS "char* \fB__malloc_heap_end\fP"
.PP
\fC\fBmalloc()\fP\fP \fBtunable\fP. 
.SS "char* \fB__malloc_heap_start\fP"
.PP
\fC\fBmalloc()\fP\fP \fBtunable\fP. 
.SS "size_t \fB__malloc_margin\fP"
.PP
\fC\fBmalloc()\fP\fP \fBtunable\fP. 
.SH "Author"
.PP 
Generated automatically by Doxygen for avr-libc from the source code.
