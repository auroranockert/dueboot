.TH "<stdint.h>: Standard Integer Types" 3 "6 Nov 2008" "Version 1.6.4" "avr-libc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
<stdint.h>: Standard Integer Types \- 
.SH "Detailed Description"
.PP 
.PP
.nf
 #include <stdint.h> 
.fi
.PP
.PP
Use [u]intN_t if you need exactly N bits.
.PP
Since these typedefs are mandated by the C99 standard, they are preferred over rolling your own typedefs. 
.SH "Define Documentation"
.PP 
.SS "#define INT16_C(value)   value"
.PP
define a constant of type int16_t 
.SS "#define INT16_MAX   0x7fff"
.PP
largest positive value an int16_t can hold. 
.SS "#define INT16_MIN   (-INT16_MAX - 1)"
.PP
smallest negative value an int16_t can hold. 
.SS "#define INT32_C(value)   __CONCAT(value, L)"
.PP
define a constant of type int32_t 
.SS "#define INT32_MAX   0x7fffffffL"
.PP
largest positive value an int32_t can hold. 
.SS "#define INT32_MIN   (-INT32_MAX - 1L)"
.PP
smallest negative value an int32_t can hold. 
.SS "#define INT64_C(value)   __CONCAT(value, LL)"
.PP
define a constant of type int64_t 
.SS "#define INT64_MAX   0x7fffffffffffffffLL"
.PP
largest positive value an int64_t can hold. 
.SS "#define INT64_MIN   (-INT64_MAX - 1LL)"
.PP
smallest negative value an int64_t can hold. 
.SS "#define INT8_C(value)   ((\fBint8_t\fP) value)"
.PP
define a constant of type int8_t 
.SS "#define INT8_MAX   0x7f"
.PP
largest positive value an int8_t can hold. 
.SS "#define INT8_MIN   (-INT8_MAX - 1)"
.PP
smallest negative value an int8_t can hold. 
.SS "#define INT_FAST16_MAX   INT16_MAX"
.PP
largest positive value an int_fast16_t can hold. 
.SS "#define INT_FAST16_MIN   INT16_MIN"
.PP
smallest negative value an int_fast16_t can hold. 
.SS "#define INT_FAST32_MAX   INT32_MAX"
.PP
largest positive value an int_fast32_t can hold. 
.SS "#define INT_FAST32_MIN   INT32_MIN"
.PP
smallest negative value an int_fast32_t can hold. 
.SS "#define INT_FAST64_MAX   INT64_MAX"
.PP
largest positive value an int_fast64_t can hold. 
.SS "#define INT_FAST64_MIN   INT64_MIN"
.PP
smallest negative value an int_fast64_t can hold. 
.SS "#define INT_FAST8_MAX   INT8_MAX"
.PP
largest positive value an int_fast8_t can hold. 
.SS "#define INT_FAST8_MIN   INT8_MIN"
.PP
smallest negative value an int_fast8_t can hold. 
.SS "#define INT_LEAST16_MAX   INT16_MAX"
.PP
largest positive value an int_least16_t can hold. 
.SS "#define INT_LEAST16_MIN   INT16_MIN"
.PP
smallest negative value an int_least16_t can hold. 
.SS "#define INT_LEAST32_MAX   INT32_MAX"
.PP
largest positive value an int_least32_t can hold. 
.SS "#define INT_LEAST32_MIN   INT32_MIN"
.PP
smallest negative value an int_least32_t can hold. 
.SS "#define INT_LEAST64_MAX   INT64_MAX"
.PP
largest positive value an int_least64_t can hold. 
.SS "#define INT_LEAST64_MIN   INT64_MIN"
.PP
smallest negative value an int_least64_t can hold. 
.SS "#define INT_LEAST8_MAX   INT8_MAX"
.PP
largest positive value an int_least8_t can hold. 
.SS "#define INT_LEAST8_MIN   INT8_MIN"
.PP
smallest negative value an int_least8_t can hold. 
.SS "#define INTMAX_C(value)   __CONCAT(value, LL)"
.PP
define a constant of type intmax_t 
.SS "#define INTMAX_MAX   INT64_MAX"
.PP
largest positive value an intmax_t can hold. 
.SS "#define INTMAX_MIN   INT64_MIN"
.PP
smallest negative value an intmax_t can hold. 
.SS "#define INTPTR_MAX   INT16_MAX"
.PP
largest positive value an intptr_t can hold. 
.SS "#define INTPTR_MIN   INT16_MIN"
.PP
smallest negative value an intptr_t can hold. 
.SS "#define PTRDIFF_MAX   INT16_MAX"
.PP
largest positive value a ptrdiff_t can hold. 
.SS "#define PTRDIFF_MIN   INT16_MIN"
.PP
smallest negative value a ptrdiff_t can hold. 
.SS "#define SIG_ATOMIC_MAX   INT8_MAX"
.PP
largest positive value a sig_atomic_t can hold. 
.SS "#define SIG_ATOMIC_MIN   INT8_MIN"
.PP
smallest negative value a sig_atomic_t can hold. 
.SS "#define SIZE_MAX   (__CONCAT(INT16_MAX, U))"
.PP
largest value a size_t can hold. 
.SS "#define UINT16_C(value)   __CONCAT(value, U)"
.PP
define a constant of type uint16_t 
.SS "#define UINT16_MAX   (__CONCAT(INT16_MAX, U) * 2U + 1U)"
.PP
largest value an uint16_t can hold. 
.SS "#define UINT32_C(value)   __CONCAT(value, UL)"
.PP
define a constant of type uint32_t 
.SS "#define UINT32_MAX   (__CONCAT(INT32_MAX, U) * 2UL + 1UL)"
.PP
largest value an uint32_t can hold. 
.SS "#define UINT64_C(value)   __CONCAT(value, ULL)"
.PP
define a constant of type uint64_t 
.SS "#define UINT64_MAX   (__CONCAT(INT64_MAX, U) * 2ULL + 1ULL)"
.PP
largest value an uint64_t can hold. 
.SS "#define UINT8_C(value)   ((\fBuint8_t\fP) __CONCAT(value, U))"
.PP
define a constant of type uint8_t 
.SS "#define UINT8_MAX   (__CONCAT(INT8_MAX, U) * 2U + 1U)"
.PP
largest value an uint8_t can hold. 
.SS "#define UINT_FAST16_MAX   UINT16_MAX"
.PP
largest value an uint_fast16_t can hold. 
.SS "#define UINT_FAST32_MAX   UINT32_MAX"
.PP
largest value an uint_fast32_t can hold. 
.SS "#define UINT_FAST64_MAX   UINT64_MAX"
.PP
largest value an uint_fast64_t can hold. 
.SS "#define UINT_FAST8_MAX   UINT8_MAX"
.PP
largest value an uint_fast8_t can hold. 
.SS "#define UINT_LEAST16_MAX   UINT16_MAX"
.PP
largest value an uint_least16_t can hold. 
.SS "#define UINT_LEAST32_MAX   UINT32_MAX"
.PP
largest value an uint_least32_t can hold. 
.SS "#define UINT_LEAST64_MAX   UINT64_MAX"
.PP
largest value an uint_least64_t can hold. 
.SS "#define UINT_LEAST8_MAX   UINT8_MAX"
.PP
largest value an uint_least8_t can hold. 
.SS "#define UINTMAX_C(value)   __CONCAT(value, ULL)"
.PP
define a constant of type uintmax_t 
.SS "#define UINTMAX_MAX   UINT64_MAX"
.PP
largest value an uintmax_t can hold. 
.SS "#define UINTPTR_MAX   UINT16_MAX"
.PP
largest value an uintptr_t can hold. 
.SH "Typedef Documentation"
.PP 
.SS "typedef signed int \fBint16_t\fP"
.PP
16-bit signed type. 
.SS "typedef signed long int \fBint32_t\fP"
.PP
32-bit signed type. 
.SS "typedef signed long long int \fBint64_t\fP"
.PP
64-bit signed type. 
.PP
\fBNote:\fP
.RS 4
This type is not available when the compiler option -mint8 is in effect. 
.RE
.PP

.SS "typedef signed char \fBint8_t\fP"
.PP
8-bit signed type. 
.SS "typedef \fBint16_t\fP \fBint_fast16_t\fP"
.PP
fastest signed int with at least 16 bits. 
.SS "typedef \fBint32_t\fP \fBint_fast32_t\fP"
.PP
fastest signed int with at least 32 bits. 
.SS "typedef \fBint64_t\fP \fBint_fast64_t\fP"
.PP
fastest signed int with at least 64 bits. 
.PP
\fBNote:\fP
.RS 4
This type is not available when the compiler option -mint8 is in effect. 
.RE
.PP

.SS "typedef \fBint8_t\fP \fBint_fast8_t\fP"
.PP
fastest signed int with at least 8 bits. 
.SS "typedef \fBint16_t\fP \fBint_least16_t\fP"
.PP
signed int with at least 16 bits. 
.SS "typedef \fBint32_t\fP \fBint_least32_t\fP"
.PP
signed int with at least 32 bits. 
.SS "typedef \fBint64_t\fP \fBint_least64_t\fP"
.PP
signed int with at least 64 bits. 
.PP
\fBNote:\fP
.RS 4
This type is not available when the compiler option -mint8 is in effect. 
.RE
.PP

.SS "typedef \fBint8_t\fP \fBint_least8_t\fP"
.PP
signed int with at least 8 bits. 
.SS "typedef \fBint64_t\fP \fBintmax_t\fP"
.PP
largest signed int available. 
.SS "typedef \fBint16_t\fP \fBintptr_t\fP"
.PP
Signed pointer compatible type. 
.SS "typedef unsigned int \fBuint16_t\fP"
.PP
16-bit unsigned type. 
.SS "typedef unsigned long int \fBuint32_t\fP"
.PP
32-bit unsigned type. 
.SS "typedef unsigned long long int \fBuint64_t\fP"
.PP
64-bit unsigned type. 
.PP
\fBNote:\fP
.RS 4
This type is not available when the compiler option -mint8 is in effect. 
.RE
.PP

.SS "typedef unsigned char \fBuint8_t\fP"
.PP
8-bit unsigned type. 
.SS "typedef \fBuint16_t\fP \fBuint_fast16_t\fP"
.PP
fastest unsigned int with at least 16 bits. 
.SS "typedef \fBuint32_t\fP \fBuint_fast32_t\fP"
.PP
fastest unsigned int with at least 32 bits. 
.SS "typedef \fBuint64_t\fP \fBuint_fast64_t\fP"
.PP
fastest unsigned int with at least 64 bits. 
.PP
\fBNote:\fP
.RS 4
This type is not available when the compiler option -mint8 is in effect. 
.RE
.PP

.SS "typedef \fBuint8_t\fP \fBuint_fast8_t\fP"
.PP
fastest unsigned int with at least 8 bits. 
.SS "typedef \fBuint16_t\fP \fBuint_least16_t\fP"
.PP
unsigned int with at least 16 bits. 
.SS "typedef \fBuint32_t\fP \fBuint_least32_t\fP"
.PP
unsigned int with at least 32 bits. 
.SS "typedef \fBuint64_t\fP \fBuint_least64_t\fP"
.PP
unsigned int with at least 64 bits. 
.PP
\fBNote:\fP
.RS 4
This type is not available when the compiler option -mint8 is in effect. 
.RE
.PP

.SS "typedef \fBuint8_t\fP \fBuint_least8_t\fP"
.PP
unsigned int with at least 8 bits. 
.SS "typedef \fBuint64_t\fP \fBuintmax_t\fP"
.PP
largest unsigned int available. 
.SS "typedef \fBuint16_t\fP \fBuintptr_t\fP"
.PP
Unsigned pointer compatible type. 
.SH "Author"
.PP 
Generated automatically by Doxygen for avr-libc from the source code.
